{"version":3,"sources":["js/redux/actions/index.js","js/redux/constants/index.js","js/components/UserBar/UserBar.js","js/components/NavBar/NavBar.js","js/components/SearchEngine/SearchBar/SearchBar.js","js/components/SearchEngine/SearchResults/SearchResults.js","js/components/SearchEngine/SearchEngine.js","js/components/MainView/MainView.js","js/components/SecondaryView/SecondaryView.js","js/components/Alert/Alert.js","js/components/LoginView/LoginView.js","js/components/SongView/SongView.js","js/components/RegisterView/RegisterView.js","js/components/PlaylistView/PlaylistView.js","js/components/FilteredView/FilteredView.js","js/components/AddSongView/AddSongView.js","js/components/CreatePlaylist/CreatePlaylist.js","App.js","serviceWorker.js","js/redux/reducers/index.js","js/redux/store/index.js","index.js"],"names":["logIn","payload","type","UserBar","connect","state","user","dispatch","logOut","props","history","useHistory","id","firstName","onClick","push","Navbar","to","activeClassName","exact","SearchBar","inputValue","debounce","func","delay","inDebounce","context","this","args","arguments","clearTimeout","setTimeout","apply","handleOnChange","e","setState","target","value","handleOnKeyUp","fetchStuff","placeholder","onChange","onKeyUp","Component","SearchResults","list","handleOnClick","className","map","song","key","title","playlist","name","author","apiURL","SearchEngine","results","searched","stuff","fetch","then","res","ok","json","catch","err","console","log","MainView","songs","ConnectedSecondaryView","url","match","category","SecondaryView","Alert","status","children","ConnectedLoginView","email","password","loggedIn","message","handleSubmit","preventDefault","options","method","headers","body","JSON","stringify","onSubmit","LoginView","ConnectedSongView","handleDelete","songId","params","lyrics","guitarTabs","SongView","usernameRegEx","passwordRegEx","firstAndLastNameRegEx","emailRegEx","ConnectedRegisterView","username","lastName","errors","registered","handleOnBlur","test","handleOnSubmit","onBlur","required","style","color","RegisterView","ConnectedPlaylistView","owner","ownerId","window","location","handleDownload","open","alert","playlistId","prevProps","prevState","Promise","all","filter","includes","PlaylistView","FilteredView","filterName","find","bigRegEx","ConnectedAddSongView","categories","authorName","categoryId","curio","songAdded","length","handleOnFormSubmit","parseInt","handleOnFileSubmit","songFileInput","document","querySelector","formData","FormData","append","files","innerHTML","defaultValue","disabled","accept","AddSongView","ConnectedCreatePlaylist","isPrivate","songList","playlistAdded","checked","splice","idList","forEach","creationTime","i","CreatePlaylist","App","path","component","Boolean","hostname","initialState","rootReducer","action","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.5e50199c.chunk.js","sourcesContent":["import { LOG_IN, LOG_OUT } from \"../constants\";\r\n\r\nexport function logIn(payload) {\r\n  return { type: LOG_IN, payload }\r\n};\r\n\r\nexport function logOut() {\r\n  return { type: LOG_OUT }\r\n};","export const LOG_IN = \"LOG_IN\";\r\nexport const LOG_OUT = \"LOG_OUT\";\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { logOut } from '../../redux/actions';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst mapStateToProps = state => {\r\n    return { user: state.user };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n      logOut: () => dispatch(logOut())\r\n    };\r\n  }\r\n\r\nfunction ConnectedUserBar (props) {\r\n    const history = useHistory();\r\n    const {user} = props;\r\n\r\n    const handleLogOut = () => {\r\n        props.logOut();\r\n        history.push('/');\r\n    }\r\n\r\n    return(\r\n        <div id='user-bar'>Hello, {user.firstName}. <button id='logout-button' onClick={handleLogOut}>Log Out</button></div>\r\n    )\r\n}\r\n\r\nconst UserBar = connect(mapStateToProps, mapDispatchToProps)(ConnectedUserBar);\r\n\r\nexport default UserBar;","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport '../NavBar/NavBar.css';\r\nimport { connect } from 'react-redux';\r\nimport UserBar from '../UserBar/UserBar';\r\n\r\nconst mapStateToProps = state => {\r\n    return { user: state.user };\r\n};\r\n\r\nfunction ConnectedNavbar(props) {\r\n    return (\r\n        <nav>\r\n            <ul>\r\n                <li><NavLink to=\"/\" activeClassName=\"active\" exact>Songs</NavLink></li>\r\n                {/* <li><NavLink to=\"/tags\" activeClassName=\"active\">Tags</NavLink></li> */}\r\n                <li><NavLink to=\"/categories\" activeClassName=\"active\">Categories</NavLink></li>\r\n                <li><NavLink to=\"/playlists\" activeClassName=\"active\">Playlists</NavLink></li>\r\n                {props.user.id && <li id=\"nav-add-li\"><NavLink to=\"/add\" activeClassName=\"active\">Add a song</NavLink></li>}\r\n                {props.user.id &&  <li id=\"nav-create-li\"><NavLink to=\"/create\" activeClassName=\"active\">Create a playlist</NavLink></li>}\r\n                {props.user.id && <li  id=\"nav-myPlaylists-li\"><NavLink to='/myPlaylists' activeClassName=\"active\">My playlists</NavLink> </li>}\r\n                {!props.user.id && <li id=\"nav-login-li\"><NavLink to=\"/login\" activeClassName=\"active\">Log In</NavLink></li>}\r\n                {!props.user.id && <li id=\"nav-register-li\"><NavLink to=\"/register\" activeClassName=\"active\">Register</NavLink></li>}\r\n                {props.user.id && <li><UserBar /></li>}\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nconst Navbar = connect(mapStateToProps)(ConnectedNavbar);\r\n\r\nexport default Navbar","import React, { Component } from 'react';\r\n\r\nclass SearchBar extends Component {\r\n    state = {\r\n        inputValue: ''\r\n    }\r\n\r\n    debounce = (func, delay) => {\r\n        let inDebounce;\r\n        return function () {\r\n            const context = this;\r\n            const args = arguments;\r\n            clearTimeout(inDebounce);\r\n            inDebounce = setTimeout(() => func.apply(context, args), delay);\r\n        }\r\n    };\r\n\r\n    handleOnChange = e => {\r\n        this.setState({ inputValue: e.target.value });\r\n    }\r\n\r\n    handleOnKeyUp = () => {\r\n        const { fetchStuff } = this.props;\r\n        const { inputValue } = this.state;\r\n        fetchStuff(inputValue);\r\n    }\r\n\r\n    render() {\r\n        const { inputValue } = this.state;\r\n        const { type } = this.props;\r\n        if (type === 'songsForPlaylists') {\r\n            return (\r\n                <input type='text' id='search-bar' placeholder={`Search songs`} value={inputValue} onChange={this.handleOnChange} onKeyUp={this.debounce(this.handleOnKeyUp, 750)} />\r\n            )\r\n        } else {\r\n            return (\r\n                <input type='text' id='search-bar' placeholder={`Search ${type}`} value={inputValue} onChange={this.handleOnChange} onKeyUp={this.debounce(this.handleOnKeyUp, 750)} />\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './SearchResults.css';\r\n\r\nfunction SearchResults(props) {\r\n    const { list, type, handleOnClick } = props;\r\n\r\n    if (list[0]) {\r\n        switch (type) {\r\n            case \"songs\": {\r\n                return (\r\n                    <ul className='results-list'>Results:\r\n                        {list.map(song => <li className='search-result-li' key={song.id}><Link to={`/songs/${song.id}`} >{song.title}</Link></li>)}\r\n                    </ul>\r\n                )\r\n            }\r\n            case \"playlists\": {\r\n                return (\r\n                    <ul className='results-list'>Results:\r\n                        {list.map(playlist => <li className='search-result-li' key={playlist.id}><Link to={`/playlists/${playlist.id}`} >{playlist.name}</Link></li>)}\r\n                    </ul>\r\n                )\r\n            }\r\n            // case \"tags\": {\r\n            //     return (\r\n            //         <ul className='results-list'>Results:\r\n            //             {list.map(tag => <Link to={`/tags/${tag.id}`} key={tag.id} ><li>{tag.name}</li></Link>)}\r\n            //         </ul>\r\n            //     )\r\n            // }\r\n            case \"authors\": {\r\n                return (\r\n                    <ul className='results-list'>Results:\r\n                        {list.map(author => <li className='search-result-li' key={author.id} onClick={handleOnClick}>{author.name}</li>)}\r\n                    </ul>\r\n                )\r\n            }\r\n            case \"songsForPlaylists\": {\r\n                return (\r\n                    <ul className='results-list'>Results:\r\n                        {list.map(song => <li className='search-result-li' key={song.id} value={song.id} onClick={handleOnClick}>\"{song.title}\" by {song.author.name} </li>)}\r\n                    </ul>\r\n                )\r\n            }\r\n            default:\r\n        }\r\n\r\n    } else if (type === \"authors\") {\r\n        return <p id='no-results-p'>{`This author has not been created yet. When you submit this form he/she will be automatically created.`}</p>\r\n    } else if (type === \"songsForPlatlists\") {\r\n        return <p id='no-results-p'>{`Couldn't find any songs matching this phrase`}</p>\r\n    } else {\r\n        return <p id='no-results-p'>{`Couldn't find any ${type} matching this phrase`}</p>\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React, { Component } from 'react';\r\nimport SearchBar from './SearchBar/SearchBar';\r\nimport SearchResults from './SearchResults/SearchResults';\r\nimport './SearchEngine.css';\r\n\r\nconst apiURL = 'https://stk-songbook.herokuapp.com/api/';\r\n\r\nclass SearchEngine extends Component {\r\n    state = {\r\n        results: [],\r\n        searched: false\r\n    }\r\n\r\n    fetchStuff = stuff => {\r\n        const {type} = this.props;\r\n\r\n        if (stuff) {\r\n            switch (type) {\r\n                case \"songs\": {\r\n                    fetch(apiURL + `songs/title/${stuff}?limit=3`)\r\n                        .then(res => {\r\n                            if(!res.ok) {throw res};\r\n                             return res.json();\r\n                        })\r\n                        .then(res => this.setState({ results: res, searched: true }))\r\n                        .catch(err => console.log(err));\r\n                    break;\r\n                }\r\n                case \"authors\": {\r\n                    fetch(apiURL + `authors/name/${stuff}?limit=3`)\r\n                        .then(res => res.json())\r\n                        .then(res => this.setState({ results: res, searched: true }));\r\n                        break;\r\n                }\r\n                case \"playlists\": {\r\n                    fetch(apiURL + `playlists/name/${stuff}?limit=3`)\r\n                        .then(res => res.json())\r\n                        .then(res => this.setState({ results: res, searched: true }));\r\n                        break;\r\n                }\r\n                // case \"tags\": {\r\n                //     fetch(apiURL + `tags/name/${stuff}?limit=3`)\r\n                //         .then(res => res.json())\r\n                //         .then(res => this.setState({ results: res, searched: true }));\r\n                //         break;\r\n                // }\r\n                case \"songsForPlaylists\": {\r\n                    fetch(apiURL + `songs/title/${stuff}?limit=3`)\r\n                        .then(res => res.json())\r\n                        .then(res => this.setState({ results: res, searched: true }));\r\n                    break;\r\n                }\r\n                default:\r\n            }\r\n        } else {\r\n            this.setState({ searched: false })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { results, searched } = this.state;\r\n        const {type, handleOnClick} = this.props;\r\n        return (\r\n            <div id='search-engine'>\r\n                <SearchBar fetchStuff={this.fetchStuff} type={type} />\r\n                {searched && <SearchResults list={results} type={type} handleOnClick={handleOnClick} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchEngine;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SearchEngine from '../SearchEngine/SearchEngine';\r\nimport './MainView.css';\r\n// import index from '../../redux/index';\r\n\r\nclass MainView extends Component {\r\n    state = {\r\n        songs: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch('https://stk-songbook.herokuapp.com/api/songs?limit=10')\r\n            .then(res => res.json())\r\n            .then(res => this.setState({ songs: res }));\r\n    };\r\n\r\n    render() {\r\n        const { songs } = this.state;\r\n        if (songs) {\r\n            return (\r\n                <div id='main'>\r\n                    <SearchEngine type='songs' />\r\n                    <div className='introduction'>\r\n                    <h1>Latest songs: </h1>\r\n                    </div>\r\n\r\n                    <ul>\r\n                        {songs.map(song =>\r\n                            <li className=\"song-list-li\" key={song.id}><Link to={`/songs/${song.id}`}>{song.title}</Link></li>)}\r\n                    </ul>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>Loading...</div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default MainView;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SearchEngine from '../SearchEngine/SearchEngine';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return { user: state.user };\r\n};\r\n\r\nclass ConnectedSecondaryView extends Component {\r\n    state = {\r\n        list: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = this.props.match.url;\r\n        const { user } = this.props;\r\n        if (url === '/myPlaylists') {\r\n            if (user.id) {\r\n                fetch(`https://stk-songbook.herokuapp.com/api/playlists/ownerId/${this.props.user.id}?include_private=true`)\r\n                    .then(res => res.json())\r\n                    .then(res => this.setState({ list: res }));\r\n            }\r\n        } else if (url === \"/playlists\") {\r\n            fetch(`https://stk-songbook.herokuapp.com/api${url}?limit=10`)\r\n                .then(res => res.json())\r\n                .then(res => this.setState({ list: res }));\r\n        } else {\r\n            fetch(`https://stk-songbook.herokuapp.com/api${url}`)\r\n                .then(res => res.json())\r\n                .then(res => this.setState({ list: res }));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { list } = this.state;\r\n        const url = this.props.match.url;\r\n        const { user } = this.props;\r\n        if (url === '/myPlaylists') {\r\n            if (!user.id) {\r\n                return <div>You have to be logged in to view this page. <Link to='/login'>Log In</Link> or <Link to='/register'>Register</Link></div>\r\n            } else if (!list[0]) {\r\n                return <div>You haven't created any playlist. You can do so <Link to='/create'>here</Link>.</div>\r\n            } else {\r\n                return (\r\n                    <>\r\n                        <div className='introduction'>\r\n                            <h1>My playlists:</h1>\r\n                        </div>\r\n                        <ul>\r\n                            {list.map(playlist => (\r\n                                <li key={playlist.id}><Link to={`/playlists/${playlist.id}`}>{playlist.name}</Link></li>\r\n                            ))}\r\n                        </ul>\r\n                    </>\r\n                )\r\n            };\r\n        } else if (list[0]) {\r\n            switch (url) {\r\n                case \"/playlists\": {\r\n                    return (\r\n                        <>\r\n                            <SearchEngine type='playlists' />\r\n                            <div className='introduction'>\r\n                                <h1>Latest playlists:</h1>\r\n                            </div>\r\n                            <ul>\r\n                                {list.map(playlist => (\r\n                                    <li key={playlist.id} className=\"playlist-list-li\"><Link to={`/playlists/${playlist.id}`}>{playlist.name}</Link></li>\r\n                                ))}\r\n                            </ul>\r\n                        </>\r\n                    )\r\n                }\r\n                case \"/categories\": {\r\n                    return (\r\n                        <>\r\n                            <SearchEngine type='songs' />\r\n                            <div className='introduction'>\r\n                                <h1>Categories:</h1>\r\n                            </div>\r\n                            <ul>\r\n                                {list.map(category => (\r\n                                    <li key={category.id} className=\"category-list-li\"><Link to={`/categories/${category.name}`}>{category.name}</Link></li>\r\n                                ))}\r\n                            </ul>\r\n                        </>\r\n                    )\r\n                }\r\n                // case \"/myPlaylists\": {\r\n                //     return (\r\n                //         <>\r\n                //             <h1>My playlists:</h1>\r\n                //             <ul>\r\n                //                 {list.map(playlist => (\r\n                //                     <li key={playlist.id}><Link to={`/playlists/${playlist.id}`}>{playlist.name}</Link></li>\r\n                //                 ))}\r\n                //             </ul>\r\n                //         </>\r\n                //     )      \r\n                //          }\r\n                default:\r\n            }\r\n            // } else if (url === '/tags') {\r\n            //     return (\r\n            //         <>\r\n            //             <SearchEngine type='tags' />\r\n            //             <h1>Latest tags:</h1>\r\n            //             <ul>\r\n            //                 {list.map(tag => (\r\n            //                     <li key={tag.id}><Link to={`/tags/${tag.name}`}>{tag.name}</Link></li>\r\n            //                 ))}\r\n            //             </ul>\r\n            //         </>\r\n            //     )\r\n            // }\r\n        } else {\r\n            return <div>Loading...</div>\r\n        }\r\n    }\r\n}\r\n\r\nconst SecondaryView = connect(mapStateToProps)(ConnectedSecondaryView);\r\n\r\nexport default SecondaryView;","import React from 'react';\r\nimport './Alert.css';\r\n\r\nfunction Alert(props) {\r\n    const {status, children} = props;\r\n    return <div className={`alert ${status}`}>{children}</div>\r\n}\r\n\r\nexport default Alert;","import React, { Component } from 'react';\r\nimport Alert from '../Alert/Alert';\r\nimport { connect } from \"react-redux\";\r\nimport { logIn, logOut } from '../../redux/actions/index';\r\n\r\nconst apiURL = `https://stk-songbook.herokuapp.com`\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        logIn: user => dispatch(logIn(user)),\r\n        logOut: () => dispatch(logOut())\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return { user: state.user };\r\n};\r\n\r\nclass ConnectedLoginView extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        loggedIn: null,\r\n        message: ''\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        const { email, password } = this.state;\r\n\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ \"email\": email, \"password\": password })\r\n        };\r\n\r\n        if (email && password) {\r\n            fetch(apiURL + '/api/users/login', options)\r\n                .then(res => {\r\n                    if (!res.ok) { throw res }\r\n                    return res.json()\r\n                })\r\n                .then(res => {\r\n                    this.props.logIn(res);\r\n                    this.setState({ loggedIn: true, password: '', email: '', message: `Hello ${res.firstName}.` });\r\n                })\r\n                .catch(err => {\r\n                    if (err.status === 401) {\r\n                        this.setState({ loggedIn: false, message: 'Wrong password' });\r\n                    } else if (err.status === 404) {\r\n                        this.setState({ loggedIn: false, message: 'There is no user with that e-mail in the database' });\r\n                    }\r\n                });\r\n        } else {\r\n            this.setState({ loggedIn: false, message: 'Please fill in the form' });\r\n        };\r\n    }\r\n\r\n    handleOnChange = e => {\r\n        const id = e.target.id;\r\n        this.setState({ [id]: e.target.value, loggedIn: null })\r\n    }\r\n\r\n    render() {\r\n        const { email, password, loggedIn, message } = this.state;\r\n        const { user } = this.props;\r\n\r\n        if (user.id) {\r\n            return (\r\n                <Alert status='success'>Succesfully logged in. Do you want to <button onClick={this.props.logOut}>Log Out</button>?</Alert>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <div className='introduction'>\r\n                        <h1>Login</h1>\r\n                        <p>Logging in allows you to add songs and create your own playlists</p>\r\n                    </div>\r\n\r\n                    <form onSubmit={this.handleSubmit} id='login-form'>\r\n                        <div className='form-div'>\r\n                        <label> E-mail:\r\n                    <input type='email' name='email' id='email' placeholder='email' value={email} onChange={this.handleOnChange} />\r\n                        </label>\r\n                        </div>\r\n\r\n                        <div className='form-div'>\r\n                        <label> Password:\r\n                    <input type='password' name='password' id='password' placeholder='Password' value={password} onChange={this.handleOnChange} />\r\n                        </label>\r\n                        </div>\r\n\r\n                        <div className='form-div'>\r\n                        <button type='submit' id='login-submit'>Login</button>\r\n                        </div>\r\n\r\n                    </form>\r\n                    {loggedIn && <Alert status='success'>{message}</Alert>}\r\n                    {loggedIn === false && <Alert status='error'>{message}</Alert>}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst LoginView = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ConnectedLoginView);\r\n\r\n\r\nexport default LoginView;","import React, { Component } from 'react';\r\nimport './SongView.css';\r\nimport { Link } from 'react-router-dom';\r\nimport SearchEngine from '../SearchEngine/SearchEngine';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return { user: state.user };\r\n};\r\n\r\nclass ConnectedSongView extends Component {\r\n    state = {\r\n        song: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { songId } = this.props.match.params;\r\n        fetch(`https://stk-songbook.herokuapp.com/api/songs/id/${songId}`)\r\n            .then(res => res.json())\r\n            .then(res => this.setState({ song: res }))\r\n    }\r\n\r\n    handleDelete = () => {\r\n        const { song } = this.state;\r\n        fetch(`https://stk-songbook.herokuapp.com/api/songs/id/${song.id}`, { method: 'DELETE' })\r\n            .then(res => {\r\n                if (!res.ok) { throw res }\r\n                return res.json()\r\n            })\r\n            .then(res => console.log(res))\r\n            .catch(err => console.log(err))\r\n        // .then(() => this.setState({ message: 'Successfuly deleted this song.'}));\r\n    }\r\n\r\n    render() {\r\n        const { song } = this.state;\r\n        const { user } = this.props;\r\n        if (song.author) {\r\n            return (\r\n                <div id='main'>\r\n                    <SearchEngine type='songs' />\r\n                    <ul>\r\n                        <li>Title: {song.title}</li>\r\n                        <li>Author: {song.author.name}</li>\r\n                        {/* {coauthors[0] && <li>Coauthors: {song.coauthors.join(', ')}</li>} */}\r\n                        <li>Lyrics: {song.lyrics}</li>\r\n                        <li>Guitar Tabs: {song.guitarTabs}</li>\r\n                        <li>Category:<Link to={`/categories/${song.category.name}`}> {song.category.name} </Link></li>\r\n                        {user.id && <button onClick={this.handleDelete} >Delete</button>}\r\n                        {/* <li>Tags: {song.tags.map(tag => <Link to={`/tags/${tag.name}`} key={tag.id}> {`${tag.name} `} </Link>)}</li> */}\r\n                    </ul>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (<div>Loading...</div>)\r\n        }\r\n    }\r\n}\r\n\r\nconst SongView = connect(mapStateToProps)(ConnectedSongView);\r\n\r\nexport default SongView;","import React, { Component } from 'react'\r\nimport Alert from '../Alert/Alert';\r\nimport './RegisterView.css';\r\nimport { connect } from 'react-redux';\r\nimport { logIn } from '../../redux/actions';\r\n\r\nconst apiURL = `https://stk-songbook.herokuapp.com`\r\nconst usernameRegEx = /^[a-zA-Z0-9 _-]{4,15}$/i;\r\nconst passwordRegEx = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{6,40}$/;\r\nconst firstAndLastNameRegEx = /^[a-zA-Z ]{2,15}$/;\r\nconst emailRegEx = /^(([^<>()[\\].,;:\\s@\"]+(.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+.)+[^<>()[\\].,;:\\s@\"]{2,})$/i;\r\n\r\nconst mapStateToProps = state => {\r\n    return { user: state.user };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        logIn: user => dispatch(logIn(user))\r\n    };\r\n};\r\n\r\nclass ConnectedRegisterView extends Component {\r\n    state = {\r\n        username: '',\r\n        password: '',\r\n        email: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        errors: {\r\n            username: '',\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n        },\r\n        registered: null,\r\n        message: ''\r\n    };\r\n\r\n    handleOnChange = e => {\r\n        const { id, value } = e.target;\r\n        const { errors } = this.state;\r\n        switch (id) {\r\n            case 'username': {\r\n                errors.username = '';\r\n                break;\r\n            }\r\n            case 'password': {\r\n                errors.password = ''\r\n                break;\r\n            }\r\n            case 'email': {\r\n                errors.email = '';\r\n                break;\r\n            }\r\n            case 'firstName': {\r\n                errors.firstName = '';\r\n                break;\r\n            }\r\n            case 'lastName': {\r\n                errors.lastName = '';\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n        this.setState({ [id]: value, registered: null });\r\n    }\r\n\r\n    handleOnBlur = e => {\r\n        const { id, value } = e.target;\r\n        let errors = this.state.errors;\r\n        switch (id) {\r\n            case 'username': {\r\n                errors.username =\r\n                    usernameRegEx.test(value) ?\r\n                        \"\" :\r\n                        \"Username has to consist of 4 to 15 letters, numbers or ' ', '_', '-'\";\r\n                break;\r\n            }\r\n            case 'password': {\r\n                errors.password =\r\n                    passwordRegEx.test(value) ?\r\n                        '' :\r\n                        \"Password has to consist of 6 to 40 letters or numbers (including at least 1 upper and lower case and 1 digit)\";\r\n                break;\r\n            }\r\n            case 'email': {\r\n                errors.email =\r\n                    emailRegEx.test(value) ?\r\n                        '' :\r\n                        \"Incorrect email\";\r\n                break;\r\n            }\r\n            case 'firstName': {\r\n                errors.firstName =\r\n                    firstAndLastNameRegEx.test(value) ?\r\n                        '' :\r\n                        \"Your name can only consist of 2 to 15 letters and or ' '\";\r\n                break;\r\n            }\r\n            case 'lastName': {\r\n                errors.lastName =\r\n                    firstAndLastNameRegEx.test(value) ?\r\n                        '' :\r\n                        \"Your name can only consist of 2 to 15 letters and or ' '\";\r\n                break;\r\n            }\r\n            default:\r\n        };\r\n        this.setState({ errors });\r\n    };\r\n\r\n    handleOnSubmit = e => {\r\n        e.preventDefault();\r\n        const { username, password, email, firstName, lastName, errors } = this.state;\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ \"email\": email, \"firstName\": firstName, \"lastName\": lastName, \"password\": password, \"username\": username })\r\n        };\r\n\r\n        if (errors.username || errors.password || errors.email || errors.firstName || errors.lastName) {\r\n            this.setState({ registered: false })\r\n        } else {\r\n            fetch(apiURL + '/api/users/register', options)\r\n                .then(res => {\r\n                    if (!res.ok) { throw res }\r\n                    return res.json()\r\n                })\r\n                .then(res => {\r\n                    this.props.logIn(res);\r\n                    this.setState({ registered: true, username: '', password: '', email: '', firstName: '', lastName: '' });\r\n                })\r\n                .catch(err => {\r\n                    switch (err.status) {\r\n                        case 400: {\r\n                            this.setState({ registered: false, message: 'There already exists an account with that name or under that email.' });\r\n                            break;  \r\n                        }\r\n                        default:\r\n                    }\r\n                });\r\n        };\r\n\r\n    };\r\n\r\n    render() {\r\n        const { username, password, email, firstName, lastName, registered, errors, message } = this.state;\r\n        const {user} = this.props;\r\n        if (user.id) {\r\n            return (\r\n                <Alert status='success'>Succesfully registered. Do you want to <button onClick={this.props.logOut}>Log Out</button>?</Alert>\r\n            )\r\n        } else {\r\n            return (\r\n                <div id='registration-wrapper'>\r\n                    <div className='introduction'>\r\n                    <h1>User Registration</h1>\r\n                    <p>Please fill in all the required fields to create a new user account.</p>\r\n                    </div>\r\n                    <form onSubmit={this.handleOnSubmit} id='registration-form' >\r\n                        <div className='form-div'>\r\n                            <label>\r\n                                Email:\r\n                        <input type='email' name='email' id='email' placeholder='E-mail' value={email} onChange={this.handleOnChange} onBlur={this.handleOnBlur} required />\r\n                            </label>\r\n                            {errors.email && <p style={{ color: 'red' }}>Incorrect e-mail.</p>}\r\n                        </div>\r\n\r\n                        <div className='form-div'>\r\n                            <label>\r\n                                Username:\r\n                        <input type='text' name='username' id='username' placeholder='Username' value={username} onChange={this.handleOnChange} onBlur={this.handleOnBlur} required />\r\n                            </label>\r\n                            {errors.username ? <p style={{ color: 'red' }}> Username has to consist of 4 to 15 letters, numbers or ' ', '_', '-'.</p> : <p> Username has to consist of 4 to 15 letters, numbers or ' ', '_', '-'.</p>}\r\n                        </div>\r\n\r\n                        <div className='form-div'>\r\n                            <label>\r\n                                Password:\r\n                        <input type='password' name='password' id='password' placeholder='Password' value={password} onChange={this.handleOnChange} onBlur={this.handleOnBlur} required />\r\n                            </label>\r\n                            {errors.password ? <p style={{ color: 'red' }}>Password has to consist of 6 to 40 letters or numbers (including at least 1 upper and lower case and 1 digit).</p> : <p>Password has to consist of 6 to 40 letters or numbers (including at least 1 upper and lower case and 1 digit).</p>}\r\n                        </div>\r\n\r\n                        <div className='form-div'>\r\n                            <label>\r\n                                First Name:\r\n                        <input type='text' name='firstName' id='firstName' placeholder='First Name' value={firstName} onChange={this.handleOnChange} onBlur={this.handleOnBlur} required />\r\n                            </label>\r\n                            {errors.firstName ? <p style={{ color: 'red' }}> Your name can only consist of 2 to 15 letters and or ' '. Those are the rules boss.</p> : <p> Your name can only consist of 2 to 15 letters and or ' '. Those are the rules boss.</p>}\r\n                        </div>\r\n\r\n                        <div className='form-div'>\r\n                            <label>\r\n                                Last Name:\r\n                        <input type='text' name='lastName' id='lastName' placeholder='Last Name' value={lastName} onChange={this.handleOnChange} onBlur={this.handleOnBlur} required />\r\n                            </label>\r\n                            {errors.lastName ? <p style={{ color: 'red' }}> Your name can only consist of 2 to 15 letters and or ' '. Those are the rules boss.</p> : <p> Your name can only consist of 2 to 15 letters and or ' '. Those are the rules boss.</p>}\r\n                        </div>\r\n                        \r\n                        <div className='form-div'>\r\n                        <button type='submit'>Submit!</button>\r\n                        </div>\r\n                    </form>\r\n                    {registered && <Alert status='success'>Account created.</Alert>}\r\n                    {registered === false && <Alert status='error'>{message}</Alert>}\r\n                </div>\r\n            );\r\n        };\r\n    };\r\n}\r\n\r\nconst RegisterView = connect(mapStateToProps, mapDispatchToProps)(ConnectedRegisterView);\r\n\r\nexport default RegisterView;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport Alert from '../Alert/Alert';\r\n\r\nconst mapStateToProps = state => {\r\n    return { user: state.user };\r\n};\r\n\r\nclass ConnectedPlaylistView extends Component {\r\n    state = {\r\n        playlist: [],\r\n        owner: '',\r\n        songs: [],\r\n        message: '',\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { playlistId } = this.props.match.params;\r\n        fetch(`https://stk-songbook.herokuapp.com/api/playlists/id/${playlistId}`)\r\n            .then(res => {\r\n                if (!res.ok) { throw res }\r\n                return res.json()\r\n            })\r\n            .then(res => this.setState({ playlist: res }))\r\n            .catch(err => {\r\n                switch (err.status) {\r\n                    case 404: {\r\n                        this.setState({ message: 'There is no such playlist' });\r\n                        break;\r\n                    }\r\n                    default:\r\n                }\r\n            })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { playlist } = this.state;\r\n        if (prevState.playlist.id !== playlist.id) {\r\n            Promise.all([\r\n                fetch(`https://stk-songbook.herokuapp.com/api/users/id/${playlist.ownerId}`)\r\n                    .then(res => res.json()),\r\n                fetch(`https://stk-songbook.herokuapp.com/api/songs`)\r\n                    .then(res => res.json())\r\n            ])\r\n                .then(res => this.setState({ owner: res[0].username, songs: res[1].filter(song => playlist.songs.includes(song.id)) }))\r\n        }\r\n    }\r\n\r\n\r\n    handleDelete = () => {\r\n        const { playlist } = this.state;\r\n        const { user } = this.props;\r\n        if (user.id === playlist.ownerId) {\r\n            fetch(`https://stk-songbook.herokuapp.com/api/playlists/id/${playlist.id}`, { method: 'DELETE' })\r\n            .then(res => {\r\n                if(!res.ok) { throw res }\r\n                window.location='/playlists';\r\n            })\r\n            .catch(err => console.log(err));\r\n        }\r\n    }\r\n\r\n    handleDownload = e => {\r\n        const {playlist} = this.state;\r\n        e.preventDefault();\r\n        fetch(`https://stk-songbook.herokuapp.com/api/playlists/download/${playlist.id}`)\r\n        .then(res => {\r\n            if(!res.ok) {throw res};\r\n            return res;\r\n        })\r\n        .then(res => {\r\n            window.open(res.url);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            alert('Something went wrong');\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        const { playlist, owner, songs, message } = this.state;\r\n        const { user } = this.props;\r\n        if (playlist.songs) {\r\n            return (\r\n                <div id='main'>\r\n                    <h1>{playlist.name}</h1>\r\n                    <h2>Created by: {owner}</h2>\r\n                    <button id='download-playlist-button' onClick={this.handleDownload}>Download this playlist as PDF</button>\r\n                    {user.id === playlist.ownerId && <button onClick={this.handleDelete}>Delete this playlist</button>}\r\n                    <div id='song-list'>Songs: {songs.map(song => (\r\n                        <div id='single-song' key={song.id}>\r\n                            <h3>{song.title}</h3>\r\n                            <p>Guitar Tabs: {song.guitarTabs}</p>\r\n                            <p>Lyrics: {song.lyrics}</p>\r\n                            <p><Link to={`/songs/${song.id}`}>Song page</Link></p>\r\n                        </div>\r\n                    ))}</div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n            <>\r\n            {message && <Alert status='error' >{message}</Alert>}\r\n            {!message && <div>Loading...</div>}    \r\n                </>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst PlaylistView = connect(mapStateToProps)(ConnectedPlaylistView);\r\n\r\nexport default PlaylistView;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SearchEngine from '../SearchEngine/SearchEngine';\r\n\r\nclass FilteredView extends Component {\r\n    state = {\r\n        songs: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        //const url = this.props.match.url;\r\n        const filterName = this.props.match.params.filterName;\r\n        fetch(`https://stk-songbook.herokuapp.com/api/categories`)\r\n            .then(res => res.json())\r\n            .then(res => res.find(category => category.name === filterName).id)\r\n            .then(res => {\r\n                fetch(`https://stk-songbook.herokuapp.com/api/categories/id/${res}/songs`)\r\n                    .then(res => res.json())\r\n                    .then(res => this.setState({ songs: res }))\r\n            })\r\n\r\n        // if (url.startsWith('/tags')) {\r\n        //     fetch(`https://stk-songbook.herokuapp.com/api/tags`)\r\n        //         .then(res => res.json())\r\n        //         .then(res => res.find(tag => tag.name === filterName).id)\r\n        //         .then(res => {\r\n        //             fetch(`https://stk-songbook.herokuapp.com/api/tags/id/${res}/songs`)\r\n        //                 .then(res => res.json())\r\n        //                 .then(res => this.setState({ songs: res }))\r\n        //         })\r\n        // }\r\n        // else if (url.startsWith('/categories')) {\r\n        //     fetch(`https://stk-songbook.herokuapp.com/api/categories`)\r\n        //         .then(res => res.json())\r\n        //         .then(res => res.find(category => category.name === filterName).id)\r\n        //         .then(res => {\r\n        //             fetch(`https://stk-songbook.herokuapp.com/api/categories/id/${res}/songs`)\r\n        //                 .then(res => res.json())\r\n        //                 .then(res => this.setState({ songs: res }))\r\n        //         })\r\n        // }\r\n    }\r\n\r\n    render() {\r\n        const { songs } = this.state;\r\n        if (songs) {\r\n            return (\r\n                <div id='main'>\r\n                    <SearchEngine type='songs' />\r\n                    <ul>\r\n                        {songs.map(song =>\r\n                            <li key={song.id}><Link to={`/songs/${song.id}`}>{song.title}</Link></li>)}\r\n                    </ul>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>Loading...</div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default FilteredView;","import React, { Component } from 'react'\r\nimport Alert from '../Alert/Alert';\r\nimport SearchEngine from '../SearchEngine/SearchEngine';\r\nimport './AddSongView.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nconst bigRegEx = /^[a-zA-Z 0-9]{2,20}$/i; //- regex for: Tag, Category, UserRole, Author, Playlist 'name' property and Song 'title'\r\n\r\nconst mapStateToProps = state => {\r\n    return { user: state.user };\r\n};\r\n\r\nclass ConnectedAddSongView extends Component {\r\n    state = {\r\n        categories: [],\r\n        authorName: '',\r\n        categoryId: '',\r\n        title: '',\r\n        lyrics: '',\r\n        guitarTabs: '',\r\n        curio: '',\r\n        songAdded: null,\r\n        errors: {\r\n            authorName: '',\r\n            title: '',\r\n            lyrics: '',\r\n            curio: '',\r\n            guitarTabs: ''\r\n        },\r\n        message: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch(`https://stk-songbook.herokuapp.com/api/categories`)\r\n            .then(res => res.json())\r\n            .then(res => this.setState({ categories: res }));\r\n    }\r\n\r\n    handleOnChange = e => {\r\n        const id = e.target.id;\r\n        let errors = this.state.errors;\r\n        this.setState({ [id]: e.target.value, songAdded: null, [errors.id]: '' });\r\n    }\r\n\r\n    handleOnBlur = e => {\r\n        const { id, value } = e.target;\r\n        let errors = this.state.errors;\r\n        switch (id) {\r\n            case 'authorName': {\r\n                errors.authorName =\r\n                    bigRegEx.test(value) ?\r\n                        \"\" :\r\n                        \"Author name has to consist of 2 to 20 letters, numbers or ' '.\";\r\n                break;\r\n            }\r\n            case 'title': {\r\n                errors.title =\r\n                    bigRegEx.test(value) ?\r\n                        '' :\r\n                        \"Song title has to consist of 2 to 20 letters, numbers or ' '.\";\r\n                break;\r\n            }\r\n            case 'lyrics': {\r\n                errors.lyrics =\r\n                    value.length > 0 ?\r\n                        '' :\r\n                        \"Might as well put 'none' or 'instrumental' into lyrics\";\r\n                break;\r\n            }\r\n            case 'guitarTabs': {\r\n                errors.guitarTabs =\r\n                    value.length > 0 ?\r\n                        '' :\r\n                        \"A song has to have guitar tabs\";\r\n                break;\r\n            }\r\n            case 'categoryId': {\r\n                errors.categoryId =\r\n                    value !== '' ?\r\n                        '' :\r\n                        \"You need to choose the category\";\r\n                break;\r\n            }\r\n            default:\r\n        };\r\n        this.setState({ errors });\r\n    };\r\n\r\n    handleOnFormSubmit = e => {\r\n        e.preventDefault();\r\n        const { title, authorName, categoryId, lyrics, guitarTabs, curio, errors } = this.state;\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ \"authorName\": authorName, \"categoryId\": parseInt(categoryId), \"coauthors\": [], \"curio\": curio, \"guitarTabs\": guitarTabs, \"lyrics\": lyrics, \"tags\": [], \"title\": title })\r\n        };\r\n\r\n        if (title && authorName && categoryId && lyrics && guitarTabs) {\r\n            if (errors.title || errors.authorName || errors.categoryId || errors.lyrics || errors.guitarTabs) {\r\n                this.setState({ songAdded: false, message: \"One or more space doesn't meet the requirements\" })\r\n            } else {\r\n                fetch('https://stk-songbook.herokuapp.com/api/songs/', options)\r\n                    .then(res => {\r\n                        if (!res.ok) { throw res }\r\n                        return res.json();\r\n                    })\r\n                    .then(res => this.setState({ songAdded: true, message: res.id, authorName: '', categoryId: '', curio: '', guitarTabs: '', lyrics: '', title: '' }))\r\n                    .catch(err => {\r\n                        switch (err.status) {\r\n                            case \"401\": {\r\n                                this.setState({ songAdded: false, message: 'Unauthorized' });\r\n                                break;\r\n                            }\r\n                            case \"403\": {\r\n                                this.setState({ songAdded: false, message: 'Forbidden' });\r\n                                break;\r\n                            }\r\n                            case \"404\": {\r\n                                this.setState({ songAdded: false, message: 'Not found' });\r\n                                break;\r\n                            }\r\n                            default:\r\n                        }\r\n                    })\r\n                // console.log({ \"authorName\": authorName, \"categoryId\": parseInt(categoryId), \"coauthors\": [], \"curio\": curio, \"guitarTabs\": guitarTabs, \"lyrics\": lyrics, \"tags\": [], \"title\": title })\r\n            }\r\n        } else {\r\n            this.setState({ songAdded: false, message: 'Fill in all of the required spaces' });\r\n        }\r\n    }\r\n\r\n    handleOnFileSubmit = e => {\r\n        e.preventDefault();\r\n        const songFileInput = document.querySelector('#song-file-input');\r\n        const formData = new FormData();\r\n        formData.append('file', songFileInput.files[0]);\r\n        const options = {\r\n            method: \"POST\",\r\n            body: formData\r\n        }\r\n        fetch(\"https://stk-songbook.herokuapp.com/api/songs/upload\", options)\r\n        .then(res => {\r\n            if(!res.ok) {throw res}\r\n            return res.json();\r\n        })\r\n        .then(res => {\r\n            this.setState({ songAdded: true, message: res.id })\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            this.setState({songAdded: false, message: 'Incorrect file'});\r\n        })\r\n    }\r\n\r\n    handleOnClick = e => {\r\n        this.setState({ authorName: e.target.innerHTML });\r\n    }\r\n\r\n    render() {\r\n        const { authorName, title, lyrics, guitarTabs, curio, categories, songAdded, errors, message } = this.state;\r\n        const { user } = this.props;\r\n        if (!user.id) {\r\n            return (\r\n                <div>\r\n                    <h3>You have to be logged in to add a song.</h3>\r\n                    <Link to='/login'>Log In</Link> or <Link to='/register' >Register</Link>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <div className='introduction'>\r\n                        <h1>Add song form</h1>\r\n                        <p>Please fill in all the required fields to create a new song.</p>\r\n                    </div>\r\n\r\n                    <form onSubmit={this.handleOnFormSubmit} id='add-song-form'>\r\n                        <div className='form-div'>\r\n                            <label> Title*:\r\n                    <input type='text' name='title' id='title' placeholder='title' value={title} onChange={this.handleOnChange} onBlur={this.handleOnBlur} />\r\n                            </label>\r\n                            {errors.title ? <p style={{ color: 'red' }}>Song title has to consist of 2 to 20 letters, numbers or ' '.</p> : <p>Song title has to consist of 2 to 20 letters, numbers or ' '.</p>}\r\n                        </div>\r\n\r\n                        <div className='form-div'>\r\n                            <label> Author*:\r\n                    <input type='text' id='authorName' placeholder='Author' value={authorName} onChange={this.handleOnChange} onBlur={this.handleOnBlur} />\r\n                            </label>\r\n                            {errors.authorName ? <p style={{ color: 'red' }}>Author name has to consist of 2 to 20 letters, numbers or ' '.</p> : <p>Author name has to consist of 2 to 20 letters, numbers or ' '.</p>}\r\n\r\n                            <label>Search existing authors (after you use this you have to still click on the input - a feature not a bug):\r\n                    <SearchEngine id='author-search' type='authors' handleOnClick={this.handleOnClick} />\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className='form-div'>\r\n                            <label>Category*:\r\n                    <select id='categoryId' name=\"categoryId\" onChange={this.handleOnChange} defaultValue='' onBlur={this.handleOnBlur}>\r\n                                    <option value='' disabled > --- </option>\r\n                                    {categories.map(category => (\r\n                                        <option className='generated-option' key={category.id} value={category.id}>{category.name}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </label>\r\n                            {errors.categoryId ? <p style={{ color: 'red' }}>You need to choose the category.</p> : <p>Choose the category.</p>}\r\n                        </div>\r\n\r\n                        {/* coauthors*/}\r\n                        <div className='form-div'>\r\n                            <label>Song trivia:\r\n                    <textarea name='curio' id='curio' placeholder='Możesz tu napisać coś o piosence' value={curio} onChange={this.handleOnChange} onBlur={this.handleOnBlur} />\r\n                            </label>\r\n                            <p>You can write something interesting about the song (not required).</p>\r\n                        </div>\r\n\r\n                        <div className='form-div'>\r\n                            <label>Song lyrics*:\r\n                    <textarea name='lyrics' id='lyrics' placeholder='lyrics' value={lyrics} onChange={this.handleOnChange} onBlur={this.handleOnBlur} required />\r\n                            </label>\r\n                            {errors.lyrics ? <p style={{ color: 'red' }}>Might as well put 'none' or 'instrumental' into lyrics</p> : <p>You can type in the lyrics here.</p>}\r\n                        </div>\r\n\r\n                        <div className='form-div'>\r\n                            <label>Guitar tabs*:\r\n                    <textarea name='guitarTabs' id='guitarTabs' placeholder='guitarTabs' value={guitarTabs} onChange={this.handleOnChange} onBlur={this.handleOnBlur} required />\r\n                            </label>\r\n                            {errors.guitarTabs ? <p style={{ color: 'red' }}>A song has to have guitar tabs</p> : <p>A song has to have guitar tabs</p>}\r\n                        </div>\r\n                        {/* <textarea name='tags' id='tags' placeholder='List tags here. Make sure to add a # before each one' /> */}\r\n                        <button type='submit'>Submit!</button>\r\n                    </form >\r\n\r\n                    <p>OR alternatively you can add a song from a json file</p>\r\n\r\n                    <form id='song-from-file' onSubmit={this.handleOnFileSubmit}>\r\n                        <input type='file' accept=\".json\" id='song-file-input' />\r\n                        <button type='submit'>Upload!</button>\r\n                    </form>\r\n\r\n                    {songAdded && <Alert status='success'>Song added. You can view it <Link to={`/songs/${message}`}>here</Link></Alert>}\r\n                    {songAdded === false && <Alert status='error'>{message}</Alert>}\r\n                </div >\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst AddSongView = connect(mapStateToProps)(ConnectedAddSongView);\r\n\r\nexport default AddSongView;","import React, { Component } from 'react';\r\nimport SearchEngine from '../SearchEngine/SearchEngine';\r\nimport './CreatePlaylist.css';\r\nimport Alert from '../Alert/Alert';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nconst bigRegEx = /^[a-zA-Z 0-9]{2,20}$/i; //- regex for: Tag, Category, UserRole, Author, Playlist 'name' property and Song 'title'\r\n\r\nconst mapStateToProps = state => {\r\n    return { user: state.user };\r\n};\r\n\r\nclass ConnectedCreatePlaylist extends Component {\r\n    state = {\r\n        name: '',\r\n        isPrivate: false,\r\n        songList: [],\r\n        errors: {\r\n            name: '',\r\n        },\r\n        playlistAdded: null,\r\n        message: ''\r\n    };\r\n\r\n    handleOnChange = e => {\r\n        const id = e.target.id;\r\n        switch (id) {\r\n            case \"name\": {\r\n                this.setState({ name: e.target.value });\r\n                break;\r\n            }\r\n            case \"isPrivateCheckbox\": {\r\n                this.setState({ isPrivate: e.target.checked });\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n        this.setState({ playlistAdded: null })\r\n    }\r\n\r\n    handleOnClick = e => {\r\n        const { songList } = this.state;\r\n        let list = [...songList];\r\n        list.push({ id: e.target.value, title: e.target.innerHTML });\r\n        this.setState({ songList: list });\r\n    }\r\n\r\n    handleDelete = e => {\r\n        const { songList } = this.state;\r\n        e.preventDefault();\r\n        let list = [...songList];\r\n        list.splice(e.target.value, 1);\r\n        this.setState({ songList: list });\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        const { name, isPrivate, songList, errors } = this.state;\r\n\r\n        if (errors.name || songList.length === 0) {\r\n            this.setState({ playlistAdded: false, message: \"Either the name doesn't meet the requirements or the list is empty\" });\r\n        } else {\r\n            let idList = [];\r\n            songList.forEach(song => idList.push(song.id));\r\n            const options = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ creationTime: null, id: 0, \"isPrivate\": isPrivate, \"name\": name, \"ownerId\": this.props.user.id, \"songs\": idList })\r\n            };\r\n            // console.log({ creationTime: null, id: 0, \"isPrivate\": isPrivate, \"name\": name, \"ownerId\": this.props.user.id, \"songs\": idList })\r\n            fetch('https://stk-songbook.herokuapp.com/api/playlists/', options)\r\n                .then(res => {\r\n                    if (!res.ok) { throw res }\r\n                    return res.json();\r\n                })\r\n                .then(res => this.setState({ playlistAdded: true, name: '', songList: [], message: res.id }))\r\n                .catch(err => {\r\n                    switch (err.status) {\r\n                        case \"401\": {\r\n                            this.setState({ songAdded: false, message: 'Unauthorized' });\r\n                            break;\r\n                        }\r\n                        case \"403\": {\r\n                            this.setState({ songAdded: false, message: 'Forbidden' });\r\n                            break;\r\n                        }\r\n                        case \"404\": {\r\n                            this.setState({ songAdded: false, message: 'Not found' });\r\n                            break;\r\n                        }\r\n                        default:\r\n                    }\r\n                });\r\n            // console.log({ creationTime: null, id: 0, \"isPrivate\": isPrivate, \"name\": name, \"ownerId\": 1, \"songs\": idList });\r\n        }\r\n    }\r\n\r\n    handleOnBlur = e => {\r\n        const { id, value } = e.target;\r\n        let errors = this.state.errors;\r\n        switch (id) {\r\n            case 'name': {\r\n                errors.name =\r\n                    bigRegEx.test(value) ?\r\n                        \"\" :\r\n                        \"Playlist name has to consist of 2 to 20 letters, numbers or ' '.\";\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { name, songList, playlistAdded, message } = this.state;\r\n        const { user } = this.props;\r\n        if (!user.id) {\r\n            return (\r\n                <div>\r\n                    <h3>You have to be logged in to create a playlist.</h3>\r\n                    <Link to='/login'>Log In</Link> or <Link to='/register' >Register</Link>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <div className='introduction'>\r\n                        <h1>Create a playlist</h1>\r\n                        <p>Fill the form below to create a new playlist</p>\r\n                        </div>\r\n\r\n                        <form onSubmit={this.handleSubmit} id='create-playlist-form'>\r\n                            <div className='form-div'>\r\n                            <label>name:\r\n                        <input type='text' id='name' placeholder='name' value={name} onChange={this.handleOnChange} onBlur={this.handleOnBlur} />\r\n                            </label>\r\n                            </div>\r\n\r\n                            <div className='form-div'>\r\n                            <label>Private:\r\n                        <input type=\"checkbox\" id=\"isPrivateCheckbox\" name=\"isPrivate\" value=\"isPrivate\" onChange={this.handleOnChange} />\r\n                            </label >\r\n                            </div>\r\n\r\n                            <div className='form-div'>\r\n                            <SearchEngine type='songsForPlaylists' handleOnClick={this.handleOnClick} />\r\n                            </div>\r\n\r\n                            <div className='form-div'>\r\n                            <button type='submit'>Create playlist</button>\r\n                            </div>\r\n\r\n                        </form>\r\n                        {playlistAdded && <Alert status='success'>Playlist added. You can view it <Link to={`/playlists/${message}`}>here</Link>. </Alert>}\r\n                        {playlistAdded === false && <Alert status='error'>{message}</Alert>}\r\n\r\n                        {songList[0] && <div id='current-playlist' >\r\n                            <p>{songList.length === 1 ? `${songList.length} song` : `${songList.length} songs`}  currently in the playlist:</p>\r\n                            <ul>\r\n                                {songList.map((song, i) => <li key={i}>{song.title}<button onClick={this.handleDelete} value={i}>Delete</button></li>)}\r\n                            </ul>\r\n                        </div>}\r\n                    </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst CreatePlaylist = connect(mapStateToProps)(ConnectedCreatePlaylist);\r\n\r\nexport default CreatePlaylist;","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Navbar from './js/components/NavBar/NavBar';\nimport MainView from './js/components/MainView/MainView';\nimport SecondaryView from './js/components/SecondaryView/SecondaryView';\nimport LoginView from './js/components/LoginView/LoginView';\nimport SongView from './js/components/SongView/SongView';\nimport RegisterView from './js/components/RegisterView/RegisterView';\nimport PlaylistView from './js/components/PlaylistView/PlaylistView';\nimport FilteredView from './js/components/FilteredView/FilteredView';\nimport AddSongView from './js/components/AddSongView/AddSongView';\nimport CreatePlaylist from './js/components/CreatePlaylist/CreatePlaylist';\n\nfunction App() {\n    return (\n      <Router>\n          <Navbar />\n          <main>\n              <Route path={[\"/\", \"/songs\"]} component={MainView} exact />\n              {/* <Route path=\"/tags\" component={SecondaryView} exact/> */}\n              <Route path=\"/categories\" component={SecondaryView} exact/>\n              <Route path=\"/playlists\" component={SecondaryView} exact />\n              <Route path=\"/songs/:songId\" component={SongView} />\n              <Route path=\"/add\" component={AddSongView} exact/>\n              <Route path=\"/login\" component={LoginView} />\n              <Route path=\"/register\" component={RegisterView} />\n              <Route path=\"/playlists/:playlistId\" component={PlaylistView} />\n              {/* <Route path=\"/tags/:filterName\" component={FilteredView} /> */}\n              <Route path=\"/categories/:filterName\" component={FilteredView} />\n              <Route path=\"/create\" component={CreatePlaylist} />\n              <Route path=\"/myPlaylists\" component={SecondaryView} />\n\n\n          </main>\n      </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { LOG_IN, LOG_OUT } from \"../constants\";\r\n\r\nconst initialState = {\r\n  user: {}\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n  if (action.type === LOG_IN) {\r\n    return { ...state, user: action.payload }\r\n  } else if (action.type === LOG_OUT) {\r\n    return { ...state, user: {} }\r\n  };\r\n  return state;\r\n};\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './js/redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}